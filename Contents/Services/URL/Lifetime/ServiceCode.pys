from hashlib import sha1
import binascii, hmac

RE_PLAYLIST = Regex('"videos":\[(.+?)\]},"cdn_path"', Regex.DOTALL)
RE_PLAYLIST2 = Regex('"videos":\[(.+?)\]},"better_exposed_filters"', Regex.DOTALL)
RE_BASE = Regex('meta base="(rtmp.+)"')

SMIL_NS = {"a":"http://www.w3.org/2005/SMIL21/Language"}
RESOLUTIONS = ["720","540","432","404","360"]

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

  return url.split('?')[0].rstrip('#')

####################################################################################################
def TestURLs():

  test_urls = []
  data = HTML.ElementFromURL('http://www.mylifetime.com/video')

  for url in data.xpath('//div[contains(@class="video-image-wrapper")]//a[starts-with(@href, "http")]/@href'):
    test_urls.append(url)

    if len(test_urls) > 2:
      break

  return test_urls

####################################################################################################
def MetadataObjectForURL(url):

  video = GetJSON(url)
  try:
    pdkURL = '%s&format=script' % video['pdk_flash_url']
  except:
    pdkURL = '%s&format=script' % video['release_url']
  Log('the value of pdkURL is %s' %pdkURL)
  data = JSON.ObjectFromURL(pdkURL)

  thumb = data['defaultThumbnailUrl']
  summary = data['description']
  duration = data['duration']
  date = Datetime.FromTimestamp(float(data['pubDate'])/1000).date()
  content_rating = data['ratings'][0]['rating'] if len(data['ratings']) > 0 else None
  title = data['title']

  if data['AETN$mrssLengthType'] == "Episode":
    show = data['AETN$seriesNameGlobal']
    index = int(data['AETN$episode'])

    return EpisodeObject(
      title = title,
      show = show,
      summary = summary,
      absolute_index = index,
      duration = duration,
      originally_available_at = date,
      content_rating = content_rating,
      thumb = Resource.ContentsOfURLWithFallback(thumb)
    )
  else:
    return VideoClipObject(
      title = title,
      summary = summary,
      duration = duration,
      originally_available_at = date,
      content_rating = content_rating,
      thumb = Resource.ContentsOfURLWithFallback(thumb)
    )

####################################################################################################
def MediaObjectsForURL(url):
  media_objects = []

  for res in RESOLUTIONS:
    media_objects.append(
      MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, res=res))],
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        video_resolution = res,
        audio_codec = AudioCodec.AAC
      )
    )
  return media_objects

####################################################################################################
@indirect
def PlayVideo(url, res):

  video = GetJSON(url)
  try:
    smil_url = video['pdk_flash_url']
    smil_url = smil_url.replace('switch=rtmp', 'format=SMIL')
  except:
    smil_url = video['release_url']
    smil_url = smil_url.split('?')[0]
    smil_url = smil_url + '?mbr=true&format=SMIL&assetTypes=medium_video_s3&metafile=true'
  sig = sign_url(smil_url)
  smil_url += '&sig='+sig
  #Log('the value of smil_url is %s' %smil_url)

  smil = XML.ElementFromURL(smil_url)
  available_res = smil.xpath("//a:video//@height", namespaces=SMIL_NS)
  if len(available_res) < 1:
    raise Ex.MediaNotAvailable
  closest = min((abs(int(res) - int(i)), i) for i in available_res)[1]
  video_url = None

  if smil.xpath('//a:ref', namespaces=SMIL_NS)[0].get('title') == "Geographic Restriction":
    raise Ex.MediaGeoblocked
  video_url = smil.xpath('//a:video[@height="%s"]//@src' %closest, namespaces=SMIL_NS)[0]

  # try falling back to the default //video/@src if we have one
  # (like for older style flv based videos)
  if not video_url:
    video_url=smil.xpath('//a:video/@src', namespaces=SMIL_NS)[0]
  
  # now if we still don't have a video_url bail
  if not video_url:
    raise Ex.MediaNotAvailable

  if video_url.startswith('http://'):
    return IndirectResponse(VideoClipObject, key=video_url)
  else:
    raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

  try:
    content = HTTP.Request(url).content.decode('utf8','replace')
  except:
    raise Ex.MediaExpired

  # Movies and TV have different JSON data, so have to check for both
  try:
    playlist = RE_PLAYLIST.search(content).group(1)
  except:
    playlist = RE_PLAYLIST2.search(content).group(1)

  playlist = "{'entries':[%s]}" % playlist
  playlist_json = JSON.ObjectFromString(playlist)

  video =  playlist_json['entries'][0]

  try:
    premium = video['is_premium']
  except:
    try:
      premium = video['video_behind_wall']
    except:
      premium = '0'

  if premium == '1':
    raise Ex.MediaNotAuthorized
  else:
    return video

  raise Ex.MediaNotAvailable

####################################################################################################
def sign_url(url):

  hmac_key = 'crazyjava'
  SEC_HEX = '733363723374' #'s3cr3t'
  expiration = get_expiration()
  path = url.split('http://link.theplatform.com/s/')[1].split('?')[0]
  sign_data = binascii.unhexlify('00'+expiration+binascii.hexlify(path).lower())
  sig = hmac.new(hmac_key, sign_data, sha1)
  sigHEX = sig.hexdigest()
  signature = '00' + expiration + sigHEX + SEC_HEX
  return signature

####################################################################################################
def get_expiration(auth_length=600):

  current_time = Datetime.TimestampFromDatetime(Datetime.Now()) + auth_length
  expiration = ('%0.2X' % current_time).lower()
  return expiration
